// Copyright (c) 2015-2022 CloudJ Technology Co., Ltd.

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
)

type Config struct {
	Langs        []string
	Translations []Translation
}

type Translation struct {
	Code    string            // 10010
	Error   string            // ErrSomeThing
	Message map[string]string // [zh-cn]: "hello"
}

const (
	templateLangDotGo = `// Copyright (c) 2015-2022 CloudJ Technology Co., Ltd.
// THIS FILE GENERATED BY 'gen-lang' DO NOT EDIT

package e

var langs = []string{ {{- QuotedSlice .Langs -}} }

var errorMsgs = map[int]map[string]string{
	{{- range $_, $lang := .Translations }}
	{{ $lang.Error }}: {
		{{- range $idx, $val := $lang.Message }}
		"{{$idx}}": "{{$val}}",
		{{- end }}
	},
	{{- end }}
}
`
)

func main() {
	// Usage:
	// gen-lang [docs/langs.csv] [portal/consts/lang.go]

	if len(os.Args) < 2 {
		panic(fmt.Errorf("missing csv and lang.go path"))
	}

	csvPath := os.Args[1]
	goPath := os.Args[2]

	fmt.Fprintf(os.Stderr, "Generate translate form %s to %s ...\n", csvPath, goPath)

	// Load language definition from langs.csv
	var langlist []string
	translates := make([]Translation, 0)

	buf, err := ioutil.ReadFile(csvPath)
	if err != nil {
		panic(err)
	}
	lines := strings.Split(string(buf), "\n")
	for lineNo, line := range lines {
		line = strings.TrimSpace(line)
		if len(line) == 0 {
			break
		}
		cols := strings.Split(line, ",")
		// Process title
		if lineNo == 0 {
			// Code,Error,zh-cn,en-us
			for colIdx, col := range cols {
				if colIdx < 2 {
					continue // skip Code,Error cols
				}
				langlist = append(langlist, col)
			}
			continue
		}

		//10000,ErrInternalError,内部错误,internal error
		translate := Translation{
			Code:    cols[0],
			Error:   cols[1],
			Message: make(map[string]string),
		}
		for i, l := range langlist {
			// Remove string quotes
			msg := strings.TrimPrefix(strings.TrimSuffix(cols[i+2], "\""), "\"")
			translate.Message[l] = msg
		}
		// fmt.Printf("translate %+v\n", translate)

		translates = append(translates, translate)
	}
	// fmt.Printf("translates %+v\n", translates)

	// Load template
	tmpl := template.New("").Funcs(template.FuncMap{"QuotedSlice": func(s []string) string {
		for i, v := range s {
			s[i] = fmt.Sprintf("%q", v)
		}
		return strings.Join(s, ", ")
	}})
	tmpl, err = tmpl.Parse(templateLangDotGo)
	if err != nil {
		panic(err)
	}

	// fmt.Printf("templates %+v\n", tmpl)

	// Generate code
	var src bytes.Buffer
	data := Config{langlist, translates}
	err = tmpl.Execute(&src, data)
	if err != nil {
		panic(err)
	}
	err = os.WriteFile(goPath, src.Bytes(), 0644)
	if err != nil {
		panic(err)
	}

	fmt.Fprint(os.Stderr, "Done.\n")
}

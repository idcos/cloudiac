// Copyright (c) 2015-2022 CloudJ Technology Co., Ltd.

package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// var modelsNames = []string{
// 	"Variable",
// 	"VariableGroup",
// }

const tplContent = `// Copyright (c) 2015-2022 CloudJ Technology Co., Ltd.

// Code generated by code-gen/desenitize DO NOT EDIT

package desensitize

import (
	// "encoding/json"
	"cloudiac/portal/models"
)

type {{.ModelName}} struct {
	models.{{.ModelName}}
}


// 不定义 MarshalJSON() 方法，因为一旦定义了该结构体就无法组合使用了，
// 会覆盖 MarshalJSON() 方法以导致组合的其他字段不输出。 比如定义结构体:
// type {{.ModelName}}WithExt struct {
// 		models.{{.ModelName}}
//		Ext	string
// }
// 当我们调用 json.Marshal({{.ModelName}}WithExt{}) 时 Ext 字段不会输出，
// 因为直接调用了 models.{{.ModelName}}.MarshalJSON() 方法。
// func (v {{.ModelName}}) MarshalJSON() ([]byte, error) {
// 	return json.Marshal(v.{{.ModelName}}.Desensitize())
// }
func (v {{.ModelName}}) Desensitize() {{.ModelName}} {
	return {{.ModelName}}{v.{{.ModelName}}.Desensitize()}
}

func New{{.ModelName}}(v models.{{.ModelName}}) {{.ModelName}} {
	rv := {{.ModelName}}{v.Desensitize()}
	return rv
}

func New{{.ModelName}}Ptr(v *models.{{.ModelName}}) *{{.ModelName}} {
	rv := {{.ModelName}}{v.Desensitize()}
	return &rv
}

func New{{.ModelName}}Slice(vs []models.{{.ModelName}}) []{{.ModelName}} {
	rvs := make([]{{.ModelName}}, len(vs))
	for i := 0; i < len(vs); i++ {
		rvs[i] = New{{.ModelName}}(vs[i])
	}
	return rvs
}

func New{{.ModelName}}SlicePtr(vs []*models.{{.ModelName}}) []*{{.ModelName}} {
	rvs := make([]*{{.ModelName}}, len(vs))
	for i := 0; i < len(vs); i++ {
		v := New{{.ModelName}}(*vs[i])
		rvs[i] = &v
	}
	return rvs
}
`

func main() {
	modelName := os.Args[1]
	destDir := os.Args[2]

	myfilename, _ := filepath.Abs(os.Getenv("GOFILE"))
	fmt.Printf("process %s:%s\n", myfilename, modelName)
	tpl, err := template.New("").Parse(tplContent)
	if err != nil {
		panic(err)
	}

	buf := bytes.NewBuffer(nil)
	err = tpl.Execute(buf, map[string]string{
		"ModelName": modelName,
	})
	if err != nil {
		panic(err)
	}
	err = os.WriteFile(filepath.Join(destDir, strings.ToLower(modelName)+"_autogen.go"), buf.Bytes(), 0644) // nolint:gosec
	if err != nil {
		panic(err)
	}
}
